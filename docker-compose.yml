version: '3.8'

services:
  postgreSql:
    restart: always
    platform: linux/x86_64
    image: postgres:latest
    ports:
      - 5432:5432
    # volumes:
    #   - .docker/postgreSql:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=root
      - POSTGRES_USER=root
      - POSTGRES_DB=ajexplorer
    networks:
      - server
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    
  redisServer:
    restart: always
    platform: linux/x86_64
    image: redis:latest
    ports:
      - 6379:6379
    volumes:
      - .docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
      - .docker/redis/data:/data
    networks:
      - server
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s 
      timeout: 5s  
      retries: 5    
      start_period: 5s 

  redis_insight:
    platform: linux/x86_64
    image: redislabs/redisinsight:1.14.0
    restart: always
    ports:
      - 8001:8001
    volumes:
      - .docker/redisinsight:/db
    networks:
      - server
    depends_on:
      - redisServer

  server:
    restart: always
    platform: linux/x86_64
    build:
      context: ./
      dockerfile: ${DOCKERFILE:-Dockerfile.dev}
    ports:
      - '3000:3000'
    command: npm run dev
    develop:
      watch:
        - action: sync
          path: ./
          target: /app
          ignore:
            - node_modules/
        - action: rebuild
          path: package.json
    volumes:
      - ./:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    networks:
      - server
    depends_on:
      postgreSql:
        condition: service_healthy
      redisServer:
        condition: service_healthy

networks:
  server:
    driver: bridge

      