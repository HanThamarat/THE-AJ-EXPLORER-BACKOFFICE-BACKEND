// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model administrator {
  id          Int       @id @default(autoincrement())
  firstName   String?   @db.VarChar(100)
  lastName    String?   @db.VarChar(100)
  email       String?   @unique @db.VarChar(100)
  username    String?   @db.VarChar(100)
  password    String?   @db.VarChar(100)
  picture     String?   @db.VarChar(255)
  picturePath String?   @db.VarChar(155)
  status      Boolean?  @default(true)
  roleId      Int
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  role        role      @relation("ToRole", fields: [roleId], references: [id], onDelete: Cascade)

  blogInsert      blog[]          @relation("BlogUserInsert")
  blogUpdate      blog[]          @relation("BlogUserUpdate")
  packageInsert   packages[]      @relation("packageInsert")
  packageupdate   packages[]      @relation("packageUpdate")
  PromoUserCreate packagePromo[]  @relation("PromoUserCreate")
  PromoUserUpdate packagePromo[]  @relation("PromoUserUpdate")
  pkgTypeCreated  packageType[]   @relation("createdPackageTypeBy")
  pkgTypeUpdated  packageType[]   @relation("updatedPackageTypeBy")
}

model role {
  id                Int       @id @default(autoincrement())
  name              String?   @db.VarChar(50)
  description       String?   @db.VarChar(1000)
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  users             administrator[]    @relation("ToRole")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  phoneNumber   String?         @db.VarChar(10)
  password      String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  userViewer  blogViewer[]  @relation("userView")
  toBooking   Booking[]     @relation("booker")
  toUserBank  UserBankAccount[] @relation("MyBankAcc")
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model province {
  id           Int         @id @default(autoincrement())
  code         Int         @unique
  nameTh       String
  nameEn       String
  districts    district[]

  package      packages[]     @relation("ToPackageProvince")
}

model district {
  id             Int          @id @default(autoincrement())
  code           Int          @unique
  nameTh         String
  nameEn         String
  province       province     @relation(fields: [provinceId], references: [id])
  provinceId     Int
  subdistricts   subdistrict[]

  package        packages[]   @relation("ToPackageDistrict")
}

model subdistrict {
  id             Int          @id @default(autoincrement())
  code           Int          @unique
  nameTh         String
  nameEn         String
  district       district     @relation(fields: [districtId], references: [id])
  districtId     Int
  postalCode     String

  package       packages[]    @relation("ToPackageSubdistrict")
}

model packages {
  id                            Int           @id @default(autoincrement())
  packageName                   String?       @db.VarChar(100)
  packageTypeId                 Int           
  description                   String?       @db.VarChar(9000)
  additional_description        String?       @db.VarChar(9000)
  provinceId                    Int?          
  districtId                    Int?
  subDistrictId                 Int?
  depart_point_lon              String?       @db.VarChar(100)
  depart_point_lat              String?       @db.VarChar(100)
  end_point_lon                 String?       @db.VarChar(100)
  end_point_lat                 String?       @db.VarChar(100)
  benefit_include               String?       @db.Text
  benefit_not_include           String?       @db.Text
  packageImages                 String?       @db.Text
  status                        Boolean?      @default(true)
  created_by                    Int
  updated_by                    Int
  created_at                    DateTime      @default(now())
  updated_at                    DateTime      @updatedAt
  deleted_at                    DateTime?

  createBy          administrator @relation("packageInsert", fields: [created_by], references: [id], onDelete: Cascade)
  updateBy          administrator @relation("packageUpdate", fields: [updated_by], references: [id], onDelete: Cascade)
  pacakgeType       packageType   @relation("ToPacakgeType", fields: [packageTypeId], references: [id])
  province          province?     @relation("ToPackageProvince", fields: [provinceId], references: [id])
  district          district?     @relation("ToPackageDistrict", fields: [districtId], references: [id])
  subdistrict       subdistrict?  @relation("ToPackageSubdistrict", fields: [subDistrictId], references: [id])

  packagePromoLink  promoLink[]         @relation("packagePromoLink")
  packageOption     packageOption[]     @relation("ToPackage")
  packageAttraction packageAttraction[] @relation("packageAttraction")
}

model packageAttraction {
  id                Int           @id @default(autoincrement())
  packageId         Int
  attractionName    String        @db.VarChar(100)
  attractionTime    DateTime      
  description       String?       @db.VarChar(1000)
  status            Boolean       @default(true)
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt

  package           packages      @relation("packageAttraction", fields: [packageId], references: [id])
}

model packageOption {
  id               Int            @id @default(autoincrement())
  packageId        Int
  pkgOptionId      Int
  name             String?        @db.VarChar(100)
  description      String?        @db.VarChar(6000)
  adultFromAge     String?        @db.VarChar(10)
  adultToAge       String?        @db.VarChar(10)
  childFromAge     String?        @db.VarChar(10)
  childToAge       String?        @db.VarChar(10)
  groupFromAge     String?        @db.VarChar(10)
  groupToAge       String?        @db.VarChar(10)
  adultPrice       Float?          
  childPrice       Float?    
  groupPrice       Float?      
  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt

  package               packages            @relation("ToPackage", fields: [packageId], references: [id], onDelete: Cascade)
  packageOptionType     packageOptionType   @relation("ToPackageOptionType", fields: [pkgOptionId], references: [id], onDelete: Cascade)
}

model packageType {
  id               Int            @id @default(autoincrement())
  name             String?        @db.VarChar(100)
  status           Boolean?       @default(true)
  created_at       DateTime       @default(now())
  created_by       Int
  updated_at       DateTime       @updatedAt
  updated_by       Int
  deleted_at       DateTime?

  package          packages[]     @relation("ToPacakgeType")

  createdBy         administrator  @relation("createdPackageTypeBy", fields: [created_by], references: [id])
  updatedBy         administrator  @relation("updatedPackageTypeBy", fields: [updated_by], references: [id])
}

model packageOptionType {
  id               Int            @id @default(autoincrement())
  name             String?        @db.VarChar(100)
  status           Boolean?       @default(true)
  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt

  packageOption   packageOption[] @relation("ToPackageOptionType")
}

model packagePromo {
  id               Int              @id @default(autoincrement())
  promoName        String           @db.VarChar(100)
  type             packagePromoType @default(promotion)
  couponCode       String?          @db.VarChar(30)
  description      String?          @db.VarChar(2000)
  startDate        DateTime        
  endDate          DateTime
  status           Boolean?         @default(true)
  created_at       DateTime         @default(now())
  created_by       Int        
  updated_at       DateTime         @updatedAt
  updated_by       Int?
  deleted_at       DateTime?

  userCreate       administrator    @relation("PromoUserCreate", fields: [created_by], references: [id])
  userUpdate       administrator?   @relation("PromoUserUpdate", fields: [updated_by], references: [id])

  promoLink        promoLink[]      @relation("packagePromo")
}

model promoLink {
  id                Int              @id @default(autoincrement())
  percentage        Float            
  packageLink       Int
  promoId           Int
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt
  
  packagePromoLink  packages         @relation("packagePromoLink", fields: [packageLink], references: [id])
  packagePromo      packagePromo     @relation("packagePromo", fields: [promoId], references: [id])
}

model blog {
  id               Int            @id @default(autoincrement())
  title            String         @db.VarChar(100)
  thumnbnail       String?        @db.VarChar(1000)
  descrition       String?        @db.Text
  status           Boolean?       @default(true)
  blogType         Int            
  created_by       Int
  updated_by       Int
  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt
  deleted_at       DateTime?

  insertBy         administrator  @relation("BlogUserInsert", fields: [created_by], references: [id], onDelete: Cascade)
  updateBy         administrator  @relation("BlogUserUpdate", fields: [updated_by], references: [id], onDelete: Cascade)
  toBlogType       blogType       @relation("toBlogType", fields: [blogType], references: [id])

  viewer           blogViewer[]   @relation("blogView")
}

model blogType {
  id               Int             @id @default(autoincrement())
  name             String          @db.VarChar(100)
  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt

  blog             blog[]         @relation("toBlogType")
}

model blogViewer {
  id              Int             @id @default(autoincrement())
  blogId          Int
  userId          String
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt

  blogView        blog            @relation("blogView", fields: [blogId], references: [id])
  userView        User            @relation("userView", fields: [userId], references: [id])
}

model Booking {
  id                Int          @id  @default(autoincrement())
  bookingId         String       @unique @db.VarChar(50)
  paymentRef        String?      @db.VarChar(60)
  paymentStatus     payStatus    @default(panding)
  bookingStatus     bkStatus     @default(panding)
  userId            String
  childPrice        Decimal? 
  childQty          Int?
  adultPrice        Decimal?
  adultQty          Int?
  groupPrice        Decimal?
  groupQty          Int?
  additionalDetail  String?      @db.VarChar(1000)
  locationId        Int?
  pickup_lat        Decimal
  pickup_lgn        Decimal
  trip_at           DateTime
  policyAccept      Boolean      @default(false)
  expire_at         DateTime
  created_at        DateTime     @default(now())
  updated_at        DateTime     @updatedAt

  toReview          Review[]     @relation("bookingReview")
  toCancel          CancalationBooking[] @relation("cancalationBooking")
  toRefund          RefundBooking[] @relation("bookingRefund")

  location          locationPoint?   @relation("pickuplocation", fields: [locationId], references: [id])
  booker            User             @relation("booker", fields: [userId], references: [id])
}

model Review {
  id                Int         @id @default(autoincrement())
  bookingId         String
  cleanliness       Int
  staff             Int
  location          Int
  title             String      @db.VarChar(100)
  samary            String      @db.VarChar(1000)
  iamge             String      @db.Text
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt 

  toBooking         Booking     @relation("bookingReview", fields: [bookingId], references: [bookingId])
}

model CancalationBooking {
  id                Int         @id @default(autoincrement())
  bookingId         String
  cancelStatus      clStatus    @default(panding)
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt

  toBooking         Booking     @relation("cancalationBooking", fields: [bookingId], references: [bookingId])
}

model RefundBooking {
  id                Int         @id @default(autoincrement())
  bookingId         String
  paymentMethod     payMethod
  amount            Decimal
  resson            String?     @db.VarChar(600)
  manualRefund      Int?
  processed_at      DateTime
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt

  toBooking         Booking     @relation("bookingRefund", fields: [bookingId], references: [bookingId])
  toUserBankAcc     UserBankAccount? @relation("userBankAcc", fields: [manualRefund], references: [id])
}

model UserBankAccount {
  id                Int         @id @default(autoincrement())
  userId            String
  bankName          String
  accountName       String
  accountNumber     String
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt

  toRefund          RefundBooking[]  @relation("userBankAcc") 
  
  toUser            User        @relation("MyBankAcc", fields: [userId], references: [id])
}

model locationPoint {
  id                Int         @id @default(autoincrement())
  locationName      String      @db.VarChar(100)
  lat               Decimal
  lng               Decimal
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt

  booking           Booking[]    @relation("pickuplocation")
}

enum payMethod {
  qr_propmtpay
  mobile_banking
  card
}

enum clStatus {
  panding
  confirmed
  failed
}

enum payStatus {
  panding
  paid
  failed
}

enum bkStatus {
  panding
  confirmed
  failed
}

enum packagePromoType {
  promotion
  coupon
}